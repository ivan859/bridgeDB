// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: network.proto

#include "network.pb.h"
#include "network.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace network {

static const char* QueryService_method_names[] = {
  "/network.QueryService/ExecuteQuery",
  "/network.QueryService/CreateNode",
  "/network.QueryService/DeleteNode",
  "/network.QueryService/CreateRelation",
  "/network.QueryService/CreateEdge",
  "/network.QueryService/DeleteEdge",
  "/network.QueryService/SearchNodeById",
  "/network.QueryService/SearchNodeByCondition",
  "/network.QueryService/SearchNode",
};

std::unique_ptr< QueryService::Stub> QueryService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< QueryService::Stub> stub(new QueryService::Stub(channel));
  return stub;
}

QueryService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ExecuteQuery_(QueryService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateNode_(QueryService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteNode_(QueryService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateRelation_(QueryService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateEdge_(QueryService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteEdge_(QueryService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SearchNodeById_(QueryService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SearchNodeByCondition_(QueryService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SearchNode_(QueryService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status QueryService::Stub::ExecuteQuery(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ExecuteQuery_, context, request, response);
}

void QueryService::Stub::experimental_async::ExecuteQuery(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ExecuteQuery_, context, request, response, std::move(f));
}

void QueryService::Stub::experimental_async::ExecuteQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ExecuteQuery_, context, request, response, std::move(f));
}

void QueryService::Stub::experimental_async::ExecuteQuery(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ExecuteQuery_, context, request, response, reactor);
}

void QueryService::Stub::experimental_async::ExecuteQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ExecuteQuery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* QueryService::Stub::AsyncExecuteQueryRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::network::QueryResponse>::Create(channel_.get(), cq, rpcmethod_ExecuteQuery_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* QueryService::Stub::PrepareAsyncExecuteQueryRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::network::QueryResponse>::Create(channel_.get(), cq, rpcmethod_ExecuteQuery_, context, request, false);
}

::grpc::Status QueryService::Stub::CreateNode(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateNode_, context, request, response);
}

void QueryService::Stub::experimental_async::CreateNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateNode_, context, request, response, std::move(f));
}

void QueryService::Stub::experimental_async::CreateNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateNode_, context, request, response, std::move(f));
}

void QueryService::Stub::experimental_async::CreateNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateNode_, context, request, response, reactor);
}

void QueryService::Stub::experimental_async::CreateNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* QueryService::Stub::AsyncCreateNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::network::QueryResponse>::Create(channel_.get(), cq, rpcmethod_CreateNode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* QueryService::Stub::PrepareAsyncCreateNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::network::QueryResponse>::Create(channel_.get(), cq, rpcmethod_CreateNode_, context, request, false);
}

::grpc::Status QueryService::Stub::DeleteNode(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteNode_, context, request, response);
}

void QueryService::Stub::experimental_async::DeleteNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteNode_, context, request, response, std::move(f));
}

void QueryService::Stub::experimental_async::DeleteNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteNode_, context, request, response, std::move(f));
}

void QueryService::Stub::experimental_async::DeleteNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteNode_, context, request, response, reactor);
}

void QueryService::Stub::experimental_async::DeleteNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* QueryService::Stub::AsyncDeleteNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::network::QueryResponse>::Create(channel_.get(), cq, rpcmethod_DeleteNode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* QueryService::Stub::PrepareAsyncDeleteNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::network::QueryResponse>::Create(channel_.get(), cq, rpcmethod_DeleteNode_, context, request, false);
}

::grpc::Status QueryService::Stub::CreateRelation(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateRelation_, context, request, response);
}

void QueryService::Stub::experimental_async::CreateRelation(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateRelation_, context, request, response, std::move(f));
}

void QueryService::Stub::experimental_async::CreateRelation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateRelation_, context, request, response, std::move(f));
}

void QueryService::Stub::experimental_async::CreateRelation(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateRelation_, context, request, response, reactor);
}

void QueryService::Stub::experimental_async::CreateRelation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateRelation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* QueryService::Stub::AsyncCreateRelationRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::network::QueryResponse>::Create(channel_.get(), cq, rpcmethod_CreateRelation_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* QueryService::Stub::PrepareAsyncCreateRelationRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::network::QueryResponse>::Create(channel_.get(), cq, rpcmethod_CreateRelation_, context, request, false);
}

::grpc::Status QueryService::Stub::CreateEdge(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateEdge_, context, request, response);
}

void QueryService::Stub::experimental_async::CreateEdge(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateEdge_, context, request, response, std::move(f));
}

void QueryService::Stub::experimental_async::CreateEdge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateEdge_, context, request, response, std::move(f));
}

void QueryService::Stub::experimental_async::CreateEdge(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateEdge_, context, request, response, reactor);
}

void QueryService::Stub::experimental_async::CreateEdge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateEdge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* QueryService::Stub::AsyncCreateEdgeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::network::QueryResponse>::Create(channel_.get(), cq, rpcmethod_CreateEdge_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* QueryService::Stub::PrepareAsyncCreateEdgeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::network::QueryResponse>::Create(channel_.get(), cq, rpcmethod_CreateEdge_, context, request, false);
}

::grpc::Status QueryService::Stub::DeleteEdge(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteEdge_, context, request, response);
}

void QueryService::Stub::experimental_async::DeleteEdge(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteEdge_, context, request, response, std::move(f));
}

void QueryService::Stub::experimental_async::DeleteEdge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteEdge_, context, request, response, std::move(f));
}

void QueryService::Stub::experimental_async::DeleteEdge(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteEdge_, context, request, response, reactor);
}

void QueryService::Stub::experimental_async::DeleteEdge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteEdge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* QueryService::Stub::AsyncDeleteEdgeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::network::QueryResponse>::Create(channel_.get(), cq, rpcmethod_DeleteEdge_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* QueryService::Stub::PrepareAsyncDeleteEdgeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::network::QueryResponse>::Create(channel_.get(), cq, rpcmethod_DeleteEdge_, context, request, false);
}

::grpc::Status QueryService::Stub::SearchNodeById(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SearchNodeById_, context, request, response);
}

void QueryService::Stub::experimental_async::SearchNodeById(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SearchNodeById_, context, request, response, std::move(f));
}

void QueryService::Stub::experimental_async::SearchNodeById(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SearchNodeById_, context, request, response, std::move(f));
}

void QueryService::Stub::experimental_async::SearchNodeById(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SearchNodeById_, context, request, response, reactor);
}

void QueryService::Stub::experimental_async::SearchNodeById(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SearchNodeById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* QueryService::Stub::AsyncSearchNodeByIdRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::network::QueryResponse>::Create(channel_.get(), cq, rpcmethod_SearchNodeById_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* QueryService::Stub::PrepareAsyncSearchNodeByIdRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::network::QueryResponse>::Create(channel_.get(), cq, rpcmethod_SearchNodeById_, context, request, false);
}

::grpc::Status QueryService::Stub::SearchNodeByCondition(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SearchNodeByCondition_, context, request, response);
}

void QueryService::Stub::experimental_async::SearchNodeByCondition(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SearchNodeByCondition_, context, request, response, std::move(f));
}

void QueryService::Stub::experimental_async::SearchNodeByCondition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SearchNodeByCondition_, context, request, response, std::move(f));
}

void QueryService::Stub::experimental_async::SearchNodeByCondition(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SearchNodeByCondition_, context, request, response, reactor);
}

void QueryService::Stub::experimental_async::SearchNodeByCondition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SearchNodeByCondition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* QueryService::Stub::AsyncSearchNodeByConditionRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::network::QueryResponse>::Create(channel_.get(), cq, rpcmethod_SearchNodeByCondition_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* QueryService::Stub::PrepareAsyncSearchNodeByConditionRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::network::QueryResponse>::Create(channel_.get(), cq, rpcmethod_SearchNodeByCondition_, context, request, false);
}

::grpc::Status QueryService::Stub::SearchNode(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SearchNode_, context, request, response);
}

void QueryService::Stub::experimental_async::SearchNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SearchNode_, context, request, response, std::move(f));
}

void QueryService::Stub::experimental_async::SearchNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SearchNode_, context, request, response, std::move(f));
}

void QueryService::Stub::experimental_async::SearchNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SearchNode_, context, request, response, reactor);
}

void QueryService::Stub::experimental_async::SearchNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SearchNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* QueryService::Stub::AsyncSearchNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::network::QueryResponse>::Create(channel_.get(), cq, rpcmethod_SearchNode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* QueryService::Stub::PrepareAsyncSearchNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::network::QueryResponse>::Create(channel_.get(), cq, rpcmethod_SearchNode_, context, request, false);
}

QueryService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QueryService::Service, ::network::Query, ::network::QueryResponse>(
          std::mem_fn(&QueryService::Service::ExecuteQuery), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QueryService::Service, ::network::Query, ::network::QueryResponse>(
          std::mem_fn(&QueryService::Service::CreateNode), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QueryService::Service, ::network::Query, ::network::QueryResponse>(
          std::mem_fn(&QueryService::Service::DeleteNode), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QueryService::Service, ::network::Query, ::network::QueryResponse>(
          std::mem_fn(&QueryService::Service::CreateRelation), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QueryService::Service, ::network::Query, ::network::QueryResponse>(
          std::mem_fn(&QueryService::Service::CreateEdge), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QueryService::Service, ::network::Query, ::network::QueryResponse>(
          std::mem_fn(&QueryService::Service::DeleteEdge), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QueryService::Service, ::network::Query, ::network::QueryResponse>(
          std::mem_fn(&QueryService::Service::SearchNodeById), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QueryService::Service, ::network::Query, ::network::QueryResponse>(
          std::mem_fn(&QueryService::Service::SearchNodeByCondition), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QueryService::Service, ::network::Query, ::network::QueryResponse>(
          std::mem_fn(&QueryService::Service::SearchNode), this)));
}

QueryService::Service::~Service() {
}

::grpc::Status QueryService::Service::ExecuteQuery(::grpc::ServerContext* context, const ::network::Query* request, ::network::QueryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QueryService::Service::CreateNode(::grpc::ServerContext* context, const ::network::Query* request, ::network::QueryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QueryService::Service::DeleteNode(::grpc::ServerContext* context, const ::network::Query* request, ::network::QueryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QueryService::Service::CreateRelation(::grpc::ServerContext* context, const ::network::Query* request, ::network::QueryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QueryService::Service::CreateEdge(::grpc::ServerContext* context, const ::network::Query* request, ::network::QueryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QueryService::Service::DeleteEdge(::grpc::ServerContext* context, const ::network::Query* request, ::network::QueryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QueryService::Service::SearchNodeById(::grpc::ServerContext* context, const ::network::Query* request, ::network::QueryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QueryService::Service::SearchNodeByCondition(::grpc::ServerContext* context, const ::network::Query* request, ::network::QueryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QueryService::Service::SearchNode(::grpc::ServerContext* context, const ::network::Query* request, ::network::QueryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace network

