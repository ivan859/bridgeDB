// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: network.proto
#ifndef GRPC_network_2eproto__INCLUDED
#define GRPC_network_2eproto__INCLUDED

#include "network.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace network {

class QueryService final {
 public:
  static constexpr char const* service_full_name() {
    return "network.QueryService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ExecuteQuery(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> AsyncExecuteQuery(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(AsyncExecuteQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> PrepareAsyncExecuteQuery(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(PrepareAsyncExecuteQueryRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateNode(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> AsyncCreateNode(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(AsyncCreateNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> PrepareAsyncCreateNode(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(PrepareAsyncCreateNodeRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteNode(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> AsyncDeleteNode(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(AsyncDeleteNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> PrepareAsyncDeleteNode(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(PrepareAsyncDeleteNodeRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateRelation(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> AsyncCreateRelation(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(AsyncCreateRelationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> PrepareAsyncCreateRelation(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(PrepareAsyncCreateRelationRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateEdge(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> AsyncCreateEdge(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(AsyncCreateEdgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> PrepareAsyncCreateEdge(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(PrepareAsyncCreateEdgeRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteEdge(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> AsyncDeleteEdge(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(AsyncDeleteEdgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> PrepareAsyncDeleteEdge(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(PrepareAsyncDeleteEdgeRaw(context, request, cq));
    }
    virtual ::grpc::Status SearchNodeById(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> AsyncSearchNodeById(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(AsyncSearchNodeByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> PrepareAsyncSearchNodeById(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(PrepareAsyncSearchNodeByIdRaw(context, request, cq));
    }
    virtual ::grpc::Status SearchNodeByCondition(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> AsyncSearchNodeByCondition(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(AsyncSearchNodeByConditionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> PrepareAsyncSearchNodeByCondition(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(PrepareAsyncSearchNodeByConditionRaw(context, request, cq));
    }
    virtual ::grpc::Status SearchNode(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> AsyncSearchNode(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(AsyncSearchNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>> PrepareAsyncSearchNode(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>>(PrepareAsyncSearchNodeRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void ExecuteQuery(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecuteQuery(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ExecuteQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateRelation(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateRelation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateRelation(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateRelation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateEdge(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateEdge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateEdge(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateEdge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteEdge(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteEdge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteEdge(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteEdge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SearchNodeById(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SearchNodeById(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SearchNodeById(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SearchNodeById(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SearchNodeByCondition(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SearchNodeByCondition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SearchNodeByCondition(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SearchNodeByCondition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SearchNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SearchNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SearchNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SearchNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* AsyncExecuteQueryRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* PrepareAsyncExecuteQueryRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* AsyncCreateNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* PrepareAsyncCreateNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* AsyncDeleteNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* PrepareAsyncDeleteNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* AsyncCreateRelationRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* PrepareAsyncCreateRelationRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* AsyncCreateEdgeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* PrepareAsyncCreateEdgeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* AsyncDeleteEdgeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* PrepareAsyncDeleteEdgeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* AsyncSearchNodeByIdRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* PrepareAsyncSearchNodeByIdRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* AsyncSearchNodeByConditionRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* PrepareAsyncSearchNodeByConditionRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* AsyncSearchNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::network::QueryResponse>* PrepareAsyncSearchNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ExecuteQuery(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> AsyncExecuteQuery(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(AsyncExecuteQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> PrepareAsyncExecuteQuery(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(PrepareAsyncExecuteQueryRaw(context, request, cq));
    }
    ::grpc::Status CreateNode(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> AsyncCreateNode(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(AsyncCreateNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> PrepareAsyncCreateNode(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(PrepareAsyncCreateNodeRaw(context, request, cq));
    }
    ::grpc::Status DeleteNode(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> AsyncDeleteNode(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(AsyncDeleteNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> PrepareAsyncDeleteNode(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(PrepareAsyncDeleteNodeRaw(context, request, cq));
    }
    ::grpc::Status CreateRelation(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> AsyncCreateRelation(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(AsyncCreateRelationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> PrepareAsyncCreateRelation(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(PrepareAsyncCreateRelationRaw(context, request, cq));
    }
    ::grpc::Status CreateEdge(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> AsyncCreateEdge(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(AsyncCreateEdgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> PrepareAsyncCreateEdge(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(PrepareAsyncCreateEdgeRaw(context, request, cq));
    }
    ::grpc::Status DeleteEdge(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> AsyncDeleteEdge(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(AsyncDeleteEdgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> PrepareAsyncDeleteEdge(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(PrepareAsyncDeleteEdgeRaw(context, request, cq));
    }
    ::grpc::Status SearchNodeById(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> AsyncSearchNodeById(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(AsyncSearchNodeByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> PrepareAsyncSearchNodeById(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(PrepareAsyncSearchNodeByIdRaw(context, request, cq));
    }
    ::grpc::Status SearchNodeByCondition(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> AsyncSearchNodeByCondition(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(AsyncSearchNodeByConditionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> PrepareAsyncSearchNodeByCondition(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(PrepareAsyncSearchNodeByConditionRaw(context, request, cq));
    }
    ::grpc::Status SearchNode(::grpc::ClientContext* context, const ::network::Query& request, ::network::QueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> AsyncSearchNode(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(AsyncSearchNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>> PrepareAsyncSearchNode(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>>(PrepareAsyncSearchNodeRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ExecuteQuery(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecuteQuery(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ExecuteQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DeleteNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DeleteNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateRelation(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateRelation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateRelation(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateRelation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateEdge(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateEdge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateEdge(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateEdge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DeleteEdge(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteEdge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteEdge(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DeleteEdge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SearchNodeById(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void SearchNodeById(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void SearchNodeById(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SearchNodeById(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SearchNodeByCondition(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void SearchNodeByCondition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void SearchNodeByCondition(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SearchNodeByCondition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SearchNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void SearchNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, std::function<void(::grpc::Status)>) override;
      void SearchNode(::grpc::ClientContext* context, const ::network::Query* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SearchNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::network::QueryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* AsyncExecuteQueryRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* PrepareAsyncExecuteQueryRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* AsyncCreateNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* PrepareAsyncCreateNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* AsyncDeleteNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* PrepareAsyncDeleteNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* AsyncCreateRelationRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* PrepareAsyncCreateRelationRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* AsyncCreateEdgeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* PrepareAsyncCreateEdgeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* AsyncDeleteEdgeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* PrepareAsyncDeleteEdgeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* AsyncSearchNodeByIdRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* PrepareAsyncSearchNodeByIdRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* AsyncSearchNodeByConditionRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* PrepareAsyncSearchNodeByConditionRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* AsyncSearchNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::network::QueryResponse>* PrepareAsyncSearchNodeRaw(::grpc::ClientContext* context, const ::network::Query& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ExecuteQuery_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateNode_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteNode_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateRelation_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateEdge_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteEdge_;
    const ::grpc::internal::RpcMethod rpcmethod_SearchNodeById_;
    const ::grpc::internal::RpcMethod rpcmethod_SearchNodeByCondition_;
    const ::grpc::internal::RpcMethod rpcmethod_SearchNode_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ExecuteQuery(::grpc::ServerContext* context, const ::network::Query* request, ::network::QueryResponse* response);
    virtual ::grpc::Status CreateNode(::grpc::ServerContext* context, const ::network::Query* request, ::network::QueryResponse* response);
    virtual ::grpc::Status DeleteNode(::grpc::ServerContext* context, const ::network::Query* request, ::network::QueryResponse* response);
    virtual ::grpc::Status CreateRelation(::grpc::ServerContext* context, const ::network::Query* request, ::network::QueryResponse* response);
    virtual ::grpc::Status CreateEdge(::grpc::ServerContext* context, const ::network::Query* request, ::network::QueryResponse* response);
    virtual ::grpc::Status DeleteEdge(::grpc::ServerContext* context, const ::network::Query* request, ::network::QueryResponse* response);
    virtual ::grpc::Status SearchNodeById(::grpc::ServerContext* context, const ::network::Query* request, ::network::QueryResponse* response);
    virtual ::grpc::Status SearchNodeByCondition(::grpc::ServerContext* context, const ::network::Query* request, ::network::QueryResponse* response);
    virtual ::grpc::Status SearchNode(::grpc::ServerContext* context, const ::network::Query* request, ::network::QueryResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecuteQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecuteQuery() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ExecuteQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteQuery(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteQuery(::grpc::ServerContext* context, ::network::Query* request, ::grpc::ServerAsyncResponseWriter< ::network::QueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateNode() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateNode(::grpc::ServerContext* context, ::network::Query* request, ::grpc::ServerAsyncResponseWriter< ::network::QueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteNode() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteNode(::grpc::ServerContext* context, ::network::Query* request, ::grpc::ServerAsyncResponseWriter< ::network::QueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateRelation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateRelation() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CreateRelation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRelation(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRelation(::grpc::ServerContext* context, ::network::Query* request, ::grpc::ServerAsyncResponseWriter< ::network::QueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateEdge() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CreateEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEdge(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateEdge(::grpc::ServerContext* context, ::network::Query* request, ::grpc::ServerAsyncResponseWriter< ::network::QueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteEdge() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DeleteEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEdge(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteEdge(::grpc::ServerContext* context, ::network::Query* request, ::grpc::ServerAsyncResponseWriter< ::network::QueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchNodeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SearchNodeById() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SearchNodeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchNodeById(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchNodeById(::grpc::ServerContext* context, ::network::Query* request, ::grpc::ServerAsyncResponseWriter< ::network::QueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchNodeByCondition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SearchNodeByCondition() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SearchNodeByCondition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchNodeByCondition(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchNodeByCondition(::grpc::ServerContext* context, ::network::Query* request, ::grpc::ServerAsyncResponseWriter< ::network::QueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SearchNode() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SearchNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchNode(::grpc::ServerContext* context, ::network::Query* request, ::grpc::ServerAsyncResponseWriter< ::network::QueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ExecuteQuery<WithAsyncMethod_CreateNode<WithAsyncMethod_DeleteNode<WithAsyncMethod_CreateRelation<WithAsyncMethod_CreateEdge<WithAsyncMethod_DeleteEdge<WithAsyncMethod_SearchNodeById<WithAsyncMethod_SearchNodeByCondition<WithAsyncMethod_SearchNode<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ExecuteQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ExecuteQuery() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>(
          [this](::grpc::ServerContext* context,
                 const ::network::Query* request,
                 ::network::QueryResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ExecuteQuery(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ExecuteQuery(
        ::grpc::experimental::MessageAllocator< ::network::Query, ::network::QueryResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ExecuteQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteQuery(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ExecuteQuery(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateNode() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>(
          [this](::grpc::ServerContext* context,
                 const ::network::Query* request,
                 ::network::QueryResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateNode(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CreateNode(
        ::grpc::experimental::MessageAllocator< ::network::Query, ::network::QueryResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteNode() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>(
          [this](::grpc::ServerContext* context,
                 const ::network::Query* request,
                 ::network::QueryResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DeleteNode(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_DeleteNode(
        ::grpc::experimental::MessageAllocator< ::network::Query, ::network::QueryResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateRelation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateRelation() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>(
          [this](::grpc::ServerContext* context,
                 const ::network::Query* request,
                 ::network::QueryResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateRelation(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CreateRelation(
        ::grpc::experimental::MessageAllocator< ::network::Query, ::network::QueryResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateRelation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRelation(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateRelation(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateEdge() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>(
          [this](::grpc::ServerContext* context,
                 const ::network::Query* request,
                 ::network::QueryResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateEdge(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CreateEdge(
        ::grpc::experimental::MessageAllocator< ::network::Query, ::network::QueryResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEdge(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateEdge(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteEdge() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>(
          [this](::grpc::ServerContext* context,
                 const ::network::Query* request,
                 ::network::QueryResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DeleteEdge(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_DeleteEdge(
        ::grpc::experimental::MessageAllocator< ::network::Query, ::network::QueryResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEdge(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteEdge(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SearchNodeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SearchNodeById() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>(
          [this](::grpc::ServerContext* context,
                 const ::network::Query* request,
                 ::network::QueryResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SearchNodeById(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SearchNodeById(
        ::grpc::experimental::MessageAllocator< ::network::Query, ::network::QueryResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SearchNodeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchNodeById(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SearchNodeById(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SearchNodeByCondition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SearchNodeByCondition() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>(
          [this](::grpc::ServerContext* context,
                 const ::network::Query* request,
                 ::network::QueryResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SearchNodeByCondition(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SearchNodeByCondition(
        ::grpc::experimental::MessageAllocator< ::network::Query, ::network::QueryResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>*>(
          ::grpc::Service::experimental().GetHandler(7))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SearchNodeByCondition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchNodeByCondition(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SearchNodeByCondition(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SearchNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SearchNode() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>(
          [this](::grpc::ServerContext* context,
                 const ::network::Query* request,
                 ::network::QueryResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SearchNode(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SearchNode(
        ::grpc::experimental::MessageAllocator< ::network::Query, ::network::QueryResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::network::Query, ::network::QueryResponse>*>(
          ::grpc::Service::experimental().GetHandler(8))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SearchNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SearchNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_ExecuteQuery<ExperimentalWithCallbackMethod_CreateNode<ExperimentalWithCallbackMethod_DeleteNode<ExperimentalWithCallbackMethod_CreateRelation<ExperimentalWithCallbackMethod_CreateEdge<ExperimentalWithCallbackMethod_DeleteEdge<ExperimentalWithCallbackMethod_SearchNodeById<ExperimentalWithCallbackMethod_SearchNodeByCondition<ExperimentalWithCallbackMethod_SearchNode<Service > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ExecuteQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecuteQuery() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ExecuteQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteQuery(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateNode() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteNode() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateRelation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateRelation() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CreateRelation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRelation(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateEdge() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CreateEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEdge(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteEdge() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DeleteEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEdge(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SearchNodeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SearchNodeById() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SearchNodeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchNodeById(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SearchNodeByCondition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SearchNodeByCondition() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SearchNodeByCondition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchNodeByCondition(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SearchNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SearchNode() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SearchNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecuteQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecuteQuery() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ExecuteQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteQuery(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecuteQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateNode() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreateNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateNode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteNode() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteNode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateRelation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateRelation() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CreateRelation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRelation(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRelation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateEdge() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_CreateEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEdge(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateEdge(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteEdge() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_DeleteEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEdge(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteEdge(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SearchNodeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SearchNodeById() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SearchNodeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchNodeById(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchNodeById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SearchNodeByCondition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SearchNodeByCondition() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SearchNodeByCondition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchNodeByCondition(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchNodeByCondition(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SearchNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SearchNode() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SearchNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchNode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ExecuteQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ExecuteQuery() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ExecuteQuery(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ExecuteQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecuteQuery(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ExecuteQuery(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateNode() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateNode(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateNode(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteNode() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DeleteNode(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteNode(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateRelation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateRelation() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateRelation(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateRelation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRelation(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateRelation(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateEdge() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateEdge(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEdge(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateEdge(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteEdge() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DeleteEdge(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEdge(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteEdge(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SearchNodeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SearchNodeById() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SearchNodeById(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SearchNodeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchNodeById(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SearchNodeById(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SearchNodeByCondition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SearchNodeByCondition() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SearchNodeByCondition(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SearchNodeByCondition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchNodeByCondition(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SearchNodeByCondition(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SearchNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SearchNode() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SearchNode(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SearchNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SearchNode(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecuteQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecuteQuery() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::network::Query, ::network::QueryResponse>(std::bind(&WithStreamedUnaryMethod_ExecuteQuery<BaseClass>::StreamedExecuteQuery, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ExecuteQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecuteQuery(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecuteQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::network::Query,::network::QueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateNode() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::network::Query, ::network::QueryResponse>(std::bind(&WithStreamedUnaryMethod_CreateNode<BaseClass>::StreamedCreateNode, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::network::Query,::network::QueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteNode() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::network::Query, ::network::QueryResponse>(std::bind(&WithStreamedUnaryMethod_DeleteNode<BaseClass>::StreamedDeleteNode, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::network::Query,::network::QueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateRelation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateRelation() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::network::Query, ::network::QueryResponse>(std::bind(&WithStreamedUnaryMethod_CreateRelation<BaseClass>::StreamedCreateRelation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateRelation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateRelation(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateRelation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::network::Query,::network::QueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateEdge() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::network::Query, ::network::QueryResponse>(std::bind(&WithStreamedUnaryMethod_CreateEdge<BaseClass>::StreamedCreateEdge, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateEdge(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateEdge(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::network::Query,::network::QueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteEdge() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::network::Query, ::network::QueryResponse>(std::bind(&WithStreamedUnaryMethod_DeleteEdge<BaseClass>::StreamedDeleteEdge, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteEdge(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteEdge(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::network::Query,::network::QueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SearchNodeById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SearchNodeById() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::network::Query, ::network::QueryResponse>(std::bind(&WithStreamedUnaryMethod_SearchNodeById<BaseClass>::StreamedSearchNodeById, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SearchNodeById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SearchNodeById(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearchNodeById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::network::Query,::network::QueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SearchNodeByCondition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SearchNodeByCondition() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::network::Query, ::network::QueryResponse>(std::bind(&WithStreamedUnaryMethod_SearchNodeByCondition<BaseClass>::StreamedSearchNodeByCondition, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SearchNodeByCondition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SearchNodeByCondition(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearchNodeByCondition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::network::Query,::network::QueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SearchNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SearchNode() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::network::Query, ::network::QueryResponse>(std::bind(&WithStreamedUnaryMethod_SearchNode<BaseClass>::StreamedSearchNode, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SearchNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SearchNode(::grpc::ServerContext* /*context*/, const ::network::Query* /*request*/, ::network::QueryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearchNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::network::Query,::network::QueryResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ExecuteQuery<WithStreamedUnaryMethod_CreateNode<WithStreamedUnaryMethod_DeleteNode<WithStreamedUnaryMethod_CreateRelation<WithStreamedUnaryMethod_CreateEdge<WithStreamedUnaryMethod_DeleteEdge<WithStreamedUnaryMethod_SearchNodeById<WithStreamedUnaryMethod_SearchNodeByCondition<WithStreamedUnaryMethod_SearchNode<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ExecuteQuery<WithStreamedUnaryMethod_CreateNode<WithStreamedUnaryMethod_DeleteNode<WithStreamedUnaryMethod_CreateRelation<WithStreamedUnaryMethod_CreateEdge<WithStreamedUnaryMethod_DeleteEdge<WithStreamedUnaryMethod_SearchNodeById<WithStreamedUnaryMethod_SearchNodeByCondition<WithStreamedUnaryMethod_SearchNode<Service > > > > > > > > > StreamedService;
};

}  // namespace network


#endif  // GRPC_network_2eproto__INCLUDED
